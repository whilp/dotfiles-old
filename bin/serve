#!/usr/bin/env python

import optparse
import os

from SimpleHTTPServer import (
    SimpleHTTPRequestHandler,
    BaseHTTPServer)

try:
    NullHandler = logging.NullHandler
except AttributeError:
    class NullHandler(logging.Handler):
        def emit(self, record): pass

log = logging.getLogger("serve")
log.addHandler(NullHandler())

Server = BaseHTTPServer.HTTPServer
class Handler(SimpleHTTPRequestHandler):
    indexes = ["index.html", "index.html", "index.xhtml"]
    
    def translate_path(self, path):
        path = SimpleHTTPRequestHandler.translate_path(self, path)

        if not self.path.endswith('/') or not os.path.isdir(path):
            return path

        # This duplicates logic in send_head() in order to make index detection
        # more extensible. It's a bit of a surprise, but overriding send_head()
        for index in self.indexes:
            index = os.path.join(path, index)
            if os.path.exists(index):
                path = index
                break

        return path

Handler.protocol_version = "HTTP/1.0"
Handler.extensions_map.update({
    ".svg": "image/svg+xml",
    ".xhtml": "application/xhtml+xml",
})

def parseargs(args):
    usage = "serve [-p PORT]"
    parser = optparse.OptionParser()
    parser.allow_interspersed_args = False

    defaults = {
        "quiet": 0,
        "silent": False
        "verbose": 0,
    }

    # Global options.
    parser.add_option("-q", "--quiet", dest="quiet",
        default=defalts["quiet"], action="count",
        help="decrease the logging verbosity")
    parser.add_option("-s", "--silent", dest="silent",
        default=defalts["silent"], action="store_true",
        help="silence the logger")
    parser.add_option("-v", "--verbose", dest="verbose",
        default=defaults["verbose"], action="count",
        help="increase the logging verbosity")

    (opts, args) = parser.parse_args()
    return (opts, args)

def main(argv):
    (opts, args) = parseargs(argv[1:])
    level = logging.WARNING - ((opts.verbose - opts.quiet) * 10)
    if opts.silent:
        level = logging.CRITICAL + 1

    format = "%(message)s"
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(format))
    log.addHandler(handler)
    log.setLevel(level)

    server = Server(("127.0.0.1", 0), Handler)
    log.info("Serving on http://%s:%s/", *server.server_address)
    try:
        server.serve_forever()
    except (KeyboardInterrupt):
        pass

if __name__ == "__main__":
    import sys
    sys.exit(main(sys.argv))
