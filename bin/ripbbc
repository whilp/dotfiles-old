#!/bin/sh

CURL="/usr/local/bin/curl -sL"
DURATION=3600
OUTFILE=
SERVICE=
URLS="
http://bbc.co.uk/radio/listen/live/r1.asx
http://bbc.co.uk/radio/listen/live/r1x.asx
http://bbc.co.uk/radio/listen/live/r2.asx
http://bbc.co.uk/radio/listen/live/r3.asx
http://bbc.co.uk/radio/listen/live/r4.asx
http://bbc.co.uk/radio/listen/live/r5l.asx
http://bbc.co.uk/radio/listen/live/r6.asx
http://bbc.co.uk/radio/listen/live/r7.asx
http://www.bbc.co.uk/worldservice/meta/tx/nb/live_infent_au_nb.asx
http://www.bbc.co.uk/worldservice/meta/tx/nb/live/eneuk.asx
http://www.bbc.co.uk/worldservice/meta/tx/nb/live_ennws_au_nb.asx
"
set -A URLS ${URLS}

say () {
	echo "===> $*"
}

warn () {
	echo "=!=> $*"
}

usage () {
	echo "$0: [-h] [-d DURATION] SERVICE OUTFILE"
}

abspath () {
    OPWD="${PWD}"
    cd "$1"
    echo $PWD
    cd "${OPWD}"
}

service2url () {
    SERVICE=$1
    EXT=${2:-.asx}

    for URL in ${URLS}; do
        case "${URL}" in
            */${SERVICE}${EXT}) echo "${URL}";;
        esac
    done
}

asx2mms () {
    URL=$1
    ${CURL} "${URL}" | sed -e '/mms:\/\//!d; s/^.*"\(.*\)".*$/\1/'
}

while getopts d:h ARG; do
    case "${ARG}" in
        d) DURATION="${OPTARG}";;
        h) usage; exit 0;;
        *) usage; exit 1;;
    esac
done

shift $(($OPTIND - 1))
SERVICE=$1; shift
OUTFILE=$1; shift

if [ -z "${SERVICE}" ]; then
    warn "You must specify a service"; usage; exit 1
elif [ -z "${OUTFILE}" ]; then
    warn "You must specify an output file"; usage; exit 1
fi

cd "${OUTPUTDIR}"
URL=$(service2url ${SERVICE})

set -A MMS $(asx2mms "${URL}")
MMS=${MMS[${RANDOM} % ${#MMS[*]}]}

mplayer  \
	-really-quiet \
	-vc null -vo null \
	-cache 512 \
	-ao pcm:file="${OUTFILE}" "${MMS}" 2>/dev/null &
PID=$!
say "$(date) Ripping ${URL} (PID: ${PID}) for ${DURATION} seconds"

SLEPT=0
INTERVAL=1
while :; do
    kill -0 "${PID}" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        warn "Ripping process exited"
		exit 1
    fi
    SLEPT=$(($SLEPT + $INTERVAL))
    if [ "${SLEPT}" -gt "${DURATION}" ]; then
        break
    fi
	sleep "${INTERVAL}"
done
say "Killing rip at PID ${PID}"
for i in 1 2 3 4 5; do
	kill "${PID}" && break
done
