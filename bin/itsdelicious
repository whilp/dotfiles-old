#!/usr/bin/env python

import os

from netrc import netrc
from urllib import urlencode
from urlparse import urlparse, urlunparse

import yahoo.application

from cli import App
from oauthlib.oauth import OAuthRequest
from yahoo.oauth import AccessToken

CACHE = "~/.itsdelicious"

# Yahoo OAuth info.
key = "dj0yJmk9U2R6cnkxWURNOGNDJmQ9WVdrOU9XVkxNRnBRTm5NbWNHbzlNVGt3T1RNek16TTBNdy0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wNQ--"
secret = "7e48012144f096cd4c9506f783dee25aa835d75d"
app_id = "9eK0ZP6s"

# URL elements.
SCHEME = 0
NETLOC = 1
URL = 2
PARAMS = 3
QUERY = 4
FRAGMENT = 5

log = None
yesorno = lambda x: (x is True and "yes") or (x is False and "no")

class OAuthApplication(yahoo.application.OAuthApplication):
    
    def request(self, url, method="GET", parameters={}):
        log.debug("Generating OAuth request for URL %s", url)
        request = OAuthRequest.from_consumer_and_token(self.consumer,
                token=self.token, http_method=method, http_url=url, 
                parameters=parameters)
        request.sign_request(self.signature_method_hmac_sha1, 
                self.consumer, self.token)

        return self.client.access_resource(request)

class Delicious(OAuthApplication):
    service_url = "http://api.del.icio.us/v2"

    def post(self, url, description, extended=None, tags=[], dt=None,
            replace="no", shared="no"):
        query = dict((k, v) for k, v in locals().items() if v is not None)
        query.pop("self")

        urlparts = list(urlparse(self.service_url + "/posts/add"))
        keys = "url description".split()
        urlparts[QUERY] = '&' + urlencode([(x, query[x]) for x in keys])
        url = urlunparse(urlparts)

        log.debug("Sending del.icio.us request to URL %s", url)
        url = "http://api.del.icio.us/v2/posts/add?&url=http%3A%2F%2Fdelicious.com%2Fhelp%2Ffaq%23developers&description=delicious%20faq"
        response = self.request(url)

        return response

def itsdelicious(app, url):
    """[-hsqv] [-Sr] [-t TAGS] -d DESCRIPTION URL"""
    global log
    log = app.log

    cache = os.path.expanduser(app.params.cache)

    try:
        token = open(os.path.join(cache, "token"), 'r')
    except (OSError, IOError):
        token = None

    delicious = Delicious(key, secret, app_id)
    delicious.client.connection.debuglevel = 10

    if token is None:
        log.debug("Requesting OAuth token")
        request_token = delicious.get_request_token()
        redirect_url  = delicious.get_authorization_url(request_token)
        app.stdout.write("Please authorize this application at the following URL:\n%s\n" % redirect_url)

        verifier = raw_input("Verification string: ")
        delicious.token  = delicious.get_access_token(request_token, verifier)
        token = AccessToken.to_string(delicious.token)

        try:
            os.makedirs(cache)
        except OSError, e:
            # Don't complain if the directory exists.
            if e.errno != 17:
                raise

        log.debug("Caching OAuth token")
        f = open(os.path.join(cache, "token"), 'w')
        f.write(token)
        f.close()
    else:
        log.debug("Reading cached OAuth token")
        delicious.token = AccessToken.from_string(token.read())
        token.close()
        
    response = delicious.post(url, 
        app.params.description,
        tags=' '.join(app.params.tags.split(',')),
        replace=yesorno(app.params.replace),
        shared=yesorno(app.params.shared))
    app.stdout.write(response)
    app.stdout.write('')

    return 0

app = App(itsdelicious)
#app.add_param("netrc", NETRC, "ftp(1) netrc file")
app.add_param("description", "", "description")
app.add_param("tags", "", "comma-delimited list of tags")
app.add_param("cache", CACHE, "cache directory (default: %s)" % CACHE)
app.add_param("replace", False, "replace existing post? (default: no)",
        action="store_true")
app.add_param("shared", False, "share post (default: no)",
        action="store_true", short="-S")

if __name__ == "__main__":
    app.run()
