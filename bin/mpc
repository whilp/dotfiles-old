#!/bin/sh

QUIET=
SERVER=localhost:6600
VERBOSE=

# http://mpd.wikia.com/wiki/Protocol_Reference

usage () {
    echo "Usage: $0 [-hq] [-s HOST:PORT] [...]"
    echo "Protocol commands:"
    cat <<EOF
    add <string path>
        add the file _path_ to the playlist (directories add recursively)
        _path_ can also be a single file
        increments playlist version by for each song added

    clear   
        clears the current playlist
        increments playlist version by 1

    clearerror  
        clear the current error message in status
        (this is also accomplished by any command that starts playback)

    close
        close the connection with the MPD

    crossfade <int seconds>
        sets crossfading between songs

    currentsong
        displays the song info of current song (same song that is identified
        in status)

    delete <int song>
        delete _song_ from playlist
        increments playlist version by 1

    deleteid <int songid>
        delete song with _songid_ from playlist
        increments playlist version by 1

    find <string type> <string what>
        finds songs in the db that are exactly _what_
        _type_ should be "album", "artist", or "title"
        _what_ is what to find

    kill
        kill MPD

    list <string type> <string arg1>
        list all tags of _type_ 
        _type_ should be "album" or "artist"
        _arg1_ is an optional parameter when type is album, this specifies
            to list albums by a artist, where artist is specified with
            arg1

    listall <string path>
        lists all songs and directories in _path_ (recursively)
        _path_ is optional and maybe a directory or path

    listallinfo <string path>
        same as listall command, except it also returns metadata info
        in the same format as lsinfo

    load <string name>
        loads the playlist _name_.m3u from the playlist directory
        increments playlist version by the number of songs added

    lsinfo <string directory>
        list contents of _directory_, from the db.  _directory_ is optional

    move <int from> <int to>
        move song at _from_ to _to_ in the playlist
        increments playlist version by 1

    moveid <int songid> <int to>
        move song with _songid_ to  _to_ in the playlist
        increments playlist version by 1

    next
        plays next song in playlist

    pause   <bool pause>
        toggle pause/resume playing
        _pause_ is required and should be 0 or 1
        NOTE: use of pause command w/o the _pause_ argument is deprecated

    password <string password>
        this is used for authentication with the server.
        _password_ is simply the plaintext password

    ping
        does nothing but return "OK"

    play <int song>
        begin playing playlist at song number _song_, _song_ is optional

    playid <int songid>
        begin playing playlist at song with _songid_, _songid_ is optional

    playlist
        displays the current playlist
        NOTE: do not use this, instead use 'playlistinfo'

    playlistinfo <int song>
        displays list of songs in the playlist
        _song_ is optional and specifies a single song to display info for

    playlistid <int songid>
        displays list of songs in the playlist
        _songid_ is optional and specifies a single song to display info for

    plchanges <playlist version>
        displays changed songs currently in the playlist since 
        _playlist version_
        NOTE: to detect songs that were deleted at the end of the playlist,
        use playlistlength returned by status command.

    plchangesposid <playlist version>
        displays changed songs currently in the playlist since 
        _playlist version_
        This function only returns the position and the id of the changed song, not the complete metadata. This is more bandwidth efficient.
        NOTE: to detect songs that were deleted at the end of the playlist,
        use playlistlength returned by status command.

    previous
        plays previous song in playlist

    random <int state>
        set random state to _state_, _state_ should be 0 or 1

    repeat <int state>
        set repeat state to _state_, _state_ should be 0 or 1

    rm <string name>
        removes the playlist <name>.m3u from the playlist directory

    save <string name>
        saves the current playlist to _name_.m3u in the playlist directory

    search <string type> <string what>
        searches for any song that contain _what_
        _type_ can be "title","artist","album", or "filename"
        search is not case sensitive

    seek <int song> <int time>
        seeks to the position _time_ (in seconds) of entry _song_ in the 
        playlist

    seekid <int songid> <int time>
        seeks to the position _time_ (in seconds) of song with _songid_

    setvol <int vol>
        set volume to _vol_
        _vol_ the range of volume is 0-100

    shuffle
        shuffles the current playlist
        increments playlist version by 1

    stats
        display stats
        artists: number of artists
        albums: number of albums
        songs: number of songs
        uptime: daemon uptime in seconds
        db_playtime: sum of all song times in db
        db_update: last db update in UNIX time
        playtime: time length of music played

    status
        reports current status of player, and volume level.
        volume: (0-100).
        repeat: (0 or 1)
        playlist: (31-bit unsigned integer, the playlist version number)
        playlistlength: (integer, the length of the playlist)
        state: ("play", "stop", or "pause")
        song: (current song stopped on or playing, playlist song number)
        songid: (current song stopped on or playing, playlist songid)
        time: <int elapsed>:<time total> (of current playing/paused song)
        bitrate: <int bitrate> (instantaneous bitrate in kbps)
        xfade: <int seconds> (crossfade in seconds)
        audio: <int sampleRate>:<int bits>:<int channels>
        updatings_db: <int job id>
        error: if there is an error, returns message here

    stop
        stop playing

    swap <int song1> <int song2>
        swap positions of _song1_ and _song2_
        increments playlist version by 1

    swapid <int songid1> <int songid2>
        swap positions of of songs with song id's of _songid1_ and _songid2_
        increments playlist version by 1

    update <string path>
        searches mp3 directory for new music and removes old music from the db
        _path_ is an optional argument that maybe a particular directory or 
            song/file to update.
        returned:
            updating_db: <int job id>
        where job id, is the job id requested for your update, and is displayed
        in status, while the requested update is happening
        increments playlist version by 1
        NOTE: To update a number of paths/songs at once, use command_list,
        it will be much more faster/efficient.  Also, if you use a 
        command_list for updating, only one update_db job id will be returned
        per sequence of updates.

    volume <int change>
        change volume by amount _change_
        NOTE: volume command is deprecated, use setvol instead
EOF
}

_mpc () {
}

_filter () {
    typeset STATE=
    while read LINE; do

        typeset LINETYPE="PROTOCOL"
        case ${LINE} in
            OK\ MPD*) STATE="RETURNOK";;
            OK) STATE="FINISHOK";;
            ACK\ *) STATE="ERROR"; LINETYPE="ERROR";;
            *) LINETYPE=;;
        esac
        [ -n "${QUIET}" ] && continue
        if [ "${LINETYPE}" == "ERROR" ]; then
            echo "${LINE#*\} }"
        elif [ -n "${VERBOSE}" ]; then
            echo "${LINE}"
        elif [ "${LINETYPE}" != "PROTOCOL" ]; then
            echo "${LINE}"
        fi
    done
    typeset RET=0
    if [ -z "${STATE}" -o "${STATE}" = "ERROR" ]; then
        RET=1
    fi
    return ${RET}
}

mpc () {
    printf "$*\n" | nc "${HOST}" "${PORT}" | _filter

    return $?
}

state () {
    typeset VERBOSE=
    typeset QUIET=
    mpc status | while read LINE; do
        case "${LINE}" in "state: "*) echo "${LINE#state: }"; break;; esac
    done
}

toggleplay () {
    CMD=
    case $(state) in
        play) CMD=stop;;
        stop) CMD=play;;
        pause) CMD=play;;
        "") return 1;;
    esac

    mpc ${CMD}
    return $?
}

nowplaying () {
    (mpc status; mpc currentsong) | (
    MODE=""
    STATE=""
    STATUS=""
    while read KEY VALUE; do
        case "${KEY}${VALUE}" in
            random:1) MODE="${MODE}r";;
            repeat:1) MODE="${MODE}R";;
            consume:1) MODE="${MODE}c";;
            single:1) MODE="${MODE}1";;
            xfade:1) MODE="${MODE}x";;
            state:stop) STATE="${STATE}s";;
            state:pause) STATE="${STATE}p";;
        esac
        case "${KEY%:}" in
            Artist|Title) STATUS="${STATUS} - ${VALUE}";;
        esac
    done
    [ -n "${STATE}" ] && MODE="${MODE}:${STATE}"
    STATUS="${STATUS# - }"
    echo "${MODE}|${STATUS}"
    )
}

while getopts hqs:v ARG; do
    case "${ARG}" in
        h) usage; exit 0;;
        q) QUIET=1;;
        s) SERVER=${ARG};;
        v) VERBOSE=1;;
        *) usage; exit 1;;
    esac
done
shift $(($OPTIND - 1))

HOST=${SERVER%:*}
PORT=${SERVER#*:}
PORT=${PORT:-6600}

case "$*" in
    nowplaying|state|toggleplay) $*;;
    *) mpc "$*";;
esac

exit $?
