#!/usr/bin/env python

from __future__ import division

import array
import base64
import binascii
import functools
import getpass
import hashlib
import hmac
import logging
import math
import optparse
import struct
import sys
import time
import unittest

try:
    NullHandler = logging.NullHandler
except AttributeError:
    class NullHandler(logging.Handler):
        def emit(self, record): pass

log = logging.getLogger("safe")
log.addHandler(NullHandler())

def xor(a, b, array=array.array):
    """Produce the exclusive-or of the characters in strings *a* and *b*.

    The input strings are converted to :type:`array.array`s of unsigned integers
    and each character of *a* is XORed with the character of *b* at the same
    index. The output is truncated to the length of the shorter of *a* and *b*.

    Returns a string.

    :param a: string
    :param b: string
    :param array: optional array type
    """
    A = array('B', a)
    alen = len(A)
    for i, x in enumerate(array('B', b)):
        if i >= alen: break
        A[i] ^= x
    return A.tostring()

def block(prf, password, salt, count, index, pack=struct.pack, xor=xor):
    u = block = salt + pack(">i", index)
    for i in range(count):
        u = prf(password, u)
        block = xor(block, u)

    return block

def pbkdf2(password, salt, count, klen, hash=hashlib.sha256, hmac=hmac.HMAC):
    """Derive a key.

    This function implements the PBKDF2 function described in RFC 2898.

    :param password: password, string
    :param salt: salt, string
    :param count: iteration count, positive integer
    :param klen: desired length of derived key, positive integer no greater than
        (2^32 -1 ) * (8 * prf().digest_size)
    """
    hlen = getattr(hash, "digest_size", hash().digest_size)
    maxklen = (2**32 - 1) * hlen
    if klen > maxklen:
        raise ValueError("derived key too long (klen %d greater than max %d)" %
                (klen, maxklen), klen, maxklen)

    def prf(key, message, hash=hash):
        return hmac(key, msg=message, digestmod=hash).digest()

    nblocks = int(math.ceil(klen/hlen))
    log.debug("Computing %d blocks with hlen %d, klen %d and maxklen %d", nblocks, hlen, klen, maxklen)
    blocks = [block(prf, password, salt, count, i) for i in xrange(1, nblocks + 1)]
    key = ''.join(blocks)
    log.debug("Computed %d blocks (%d octets)", len(blocks), len(key))

    return key[:klen]

def hash(data, hash=hashlib.sha256, rounds=1000):
    start = time.time()
    hashed = hash(data)

    i = 0
    while i < rounds:
        i += 1
        hashed.update(hashed.digest())

    seconds = time.time() - start
    log.debug("Hashed %d B (%d rounds) in %g seconds", len(data), rounds, seconds)
    return hashed

def parseargs(args):
    usage = "safe"
    parser = optparse.OptionParser()
    parser.allow_interspersed_args = False

    defaults = {
        "rounds": 10**5,
        "encoding": "urlsafe_b64",
        "length": 20,
    }

    # Global options.
    parser.add_option("-e", "--encoding", dest="encoding",
        default=defaults["encoding"],
        help="encoding (default % %(encoding)s)" % defaults)
    parser.add_option("-l", "--length", dest="length",
        default=defaults["length"],
        help="length (default % %(length)s)" % defaults)
    parser.add_option("-r", "--rounds", dest="rounds",
        default=defaults["rounds"],
        help="number of rounds (default % %(rounds)s)" % defaults)
    parser.add_option("-q", "--quiet", dest="quiet",
        default=0, action="count",
        help="decrease the logging verbosity")
    parser.add_option("-s", "--silent", dest="silent",
        default=False, action="store_true",
        help="silence the logger")
    parser.add_option("-v", "--verbose", dest="verbose",
        default=0, action="count",
        help="increase the logging verbosity")

    (opts, args) = parser.parse_args()
    return (opts, args)

def main():
    (opts, args) = parseargs(sys.argv[1:])
    level = logging.WARNING - ((opts.verbose - opts.quiet) * 10)
    if opts.silent:
        level = logging.CRITICAL + 1

    format = "%(message)s"
    logger = logging.getLogger("safe")
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(logging.Formatter(format))
    logger.addHandler(handler)
    logger.setLevel(level)

    encoding = opts.encoding
    length = opts.length
    rounds = opts.rounds

    encode = getattr(base64, encoding + "encode")
    master = hash(getpass.getpass("Master password: "), rounds=rounds).digest()
    confirm = ""
    i = 0
    while confirm != master and i < 5:
        confirm = hash(getpass.getpass("Confirm master password: "), rounds=rounds).digest()
    if confirm != master:
        sys.stdout.write("Could not confirm master password\n")
        sys.exit(1)

    prompt = "> "
    while True:
        account = raw_input(prompt)
        sys.stdout.write("%30s\t" % account)
        sys.stdout.flush()
        hashed = hash(master + account, rounds=rounds).digest()
        encoded = encode(hashed)
        sys.stdout.write("%s\n" % encoded[:length])

if __name__ == "__main__":
    try:
        main()
    except (EOFError, KeyboardInterrupt):
        sys.stdout.write('\n')
        sys.stdout.flush()
        pass

class TestXor(unittest.TestCase):

    def test_simple(self):
        """xor() on two strings of equal length should return a similarly sized string."""
        result = xor("spam", "eggs")

        self.assertEqual(result, '\x16\x17\x06\x1e')

    def test_shorta(self):
        """xor() with short 'b' truncates a to b."""
        result = xor("spam", "foo")

        self.assertEqual(result, '\x15\x1f\x0e')

    def test_shortb(self):
        """xor() with short 'a' truncates b to a."""
        result = xor("foo", "spam")

        self.assertEqual(result, '\x15\x1f\x0e')

class TestBlock(unittest.TestCase):

    def setUp(self):
        unittest.TestCase.setUp(self)
        self.prf = lambda k, m: k + m
        self.pack = lambda f, *v: ''.join(str(x) for x in v)
        self.xor = lambda a, b: a + b

    def test_simple(self):
        """Generate a dummy block."""
        result = block(self.prf, "password", "salt", 10, 0, pack=self.pack, xor=self.xor)

        self.assertEquals(len(result), 495)
        self.assertEquals(result[18:30], 'passwordpass')

    def test_real(self):
        """Generate a real block."""
        from hmac import HMAC
        from hashlib import sha256

        def prf(key, msg):
            return HMAC(key, msg, digestmod=sha256).digest()
        result = block(prf, "password", "salt", 10, 1)

        self.assertEqual(result, '\x16]\xa4\xfc\xd97\xef\xe3')

class TestVectors(unittest.TestCase):
    """Test vectors for PBKDF2.

    http://tools.ietf.org/html/draft-josefsson-pbkdf2-test-vectors-06
    """

    def assertVector(self, P, S, c, dkLen, DK):
        result = pbkdf2(P, S, c, dkLen)

        self.assertEqual(result, binascii.unhexlify(''.join(DK.split())))

    def test_vector_2898_1(self):
        P = "password" # (8 octets)
        S = "salt" # (4 octets)
        c = 1
        dkLen = 20

        DK = "0c 60 c8 0f 96 1f 0e 71 " \
             "f3 a9 b5 24 af 60 12 06 " \
             "2f e0 37 a6"              # (20 octets)
        self.assertVector(P, S, c, dkLen, DK)

    def test_vector_2898_2(self):
        P = "password" # (8 octets)
        S = "salt" # (4 octets)
        c = 2
        dkLen = 20

        DK = "ea 6c 01 4d c7 2d 6f 8c " \
             "cd 1e d9 2a ce 1d 41 f0 " \
             "d8 de 89 57"              # (20 octets)
        self.assertVector(P, S, c, dkLen, DK)

    def test_vector_2898_3(self):
        P = "password" # (8 octets)
        S = "salt" # (4 octets)
        c = 4096
        dkLen = 20

        DK = "4b 00 79 01 b7 65 48 9a " \
             "be ad 49 d9 26 f7 21 d0 " \
             "65 a4 29 c1 "             # (20 octets)
        self.assertVector(P, S, c, dkLen, DK)

    def test_vector_2898_4(self):
        P = "password" # (8 octets)
        S = "salt" # (4 octets)
        c = 16777216
        dkLen = 20

        DK = "ee fe 3d 61 cd 4d a4 e4 " \
             "e9 94 5b 3d 6b a2 15 8c " \
             "26 34 e9 84"              # (20 octets)
        self.assertVector(P, S, c, dkLen, DK)

    def test_vector_2898_5(self):
        P = "passwordPASSWORDpassword" # (24 octets)
        S = "saltSALTsaltSALTsaltSALTsaltSALTsalt" # (36 octets)
        c = 4096
        dkLen = 25

        DK = "3d 2e ec 4f e4 1c 84 9b " \
             "80 c8 d8 36 62 c0 e4 4a " \
             "8b 29 1a 96 4c f2 f0 70 " \
             "38"                       # (25 octets)
        self.assertVector(P, S, c, dkLen, DK)

    def test_vector_2898_6(self):
        P = "pass\0word" # (9 octets)
        S = "sa\0lt" # (5 octets)
        c = 4096
        dkLen = 16

        DK = "56 fa 6a a7 55 48 09 9d " \
             "cc 37 d7 f0 34 25 e0 c3"  # (16 octets)
        self.assertVector(P, S, c, dkLen, DK)
