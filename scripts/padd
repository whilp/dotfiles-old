#!/bin/sh

# TODO:
# -make $0 into a suite (eg ./package -a to add, -d to delete, etc)
#   -delete
#   -add/install
#   -info
#   -update
#	-compare output of 'info' to fresh INDEX file; note version
#	differences
# -add checks ('really want to install?') [WCMAIER: DONE 20051122]
# -add verbosity levels
# -add a usage message
# -add 'freshness' checks on INDEX file [WCMAIER: DONE 20051122]

GREP=/usr/bin/grep
PKGADD=/usr/sbin/pkg_add
SUDO=/usr/bin/sudo
WGET=/usr/local/bin/wget
WC=/usr/bin/wc
STAT=/usr/bin/stat
DATE=/bin/date
FTP=/usr/bin/ftp

ME=$(basename $0)

getPkgName () {
    ${GREP} $1 ${PKGINDEX}
}
downloadIndex () {
    ${SUDO} ${FTP} -o ${PKGINDEX} ${PKGPATH}/index.txt >/dev/null
}
usage () {
    echo "usage: ${ME} [-h]"
    echo ""
    echo "  -h|--help	: Print this usage summary and exit."
}

echo $#
if [ "$#" -eq 0 ]; then
    usage
fi
while [ "$#" -gt 0 ]; do
    case "x$1" in
	x-h|x--help)
	usage
	;;
	*)
	usage
	;;
    esac
    shift
done

PKGINDEX=/usr/packages/INDEX
PKGPATH=${PKG_PATH:-ftp://openbsd.mirrors.tds.net/pub/OpenBSD/3.8/packages/i386/}

if [ ! -r ${PKGINDEX} ]; then
    echo "====> Local copy of the packages index (${PKGINDEX}) not found; downloading."
    downloadIndex
fi

SECONDSWEEK=$((60*60*24*7))
INDEXMTIME=$(${STAT} -L -f "%m" ${PKGINDEX})
TODAY=$(date "+%s")

if [ "$((TODAY - INDEXMTIME))" -gt "${SECONDSWEEK}" ]; then
    # This check works, but it makes sense to add a cron job to
    # update the file instead of relying on this program (or you) to
    # regularly update it.
    echo "====> Local copy of the packages index (${PKGINDEX}) over a week old; updating."
    downloadIndex
fi

RENR=$(echo $* | ${WC} -w)
RENR=$(echo ${RENR})

increment=1
for index in $*; do
    echo "====> Processing regex ${increment} of ${RENR}: '${index}'."
# Find number of matching packages
    MATCHINGPKGNR=$(getPkgName ${index} | ${WC} -l)
    MATCHINGPKGNR=$(echo ${MATCHINGPKGNR})	    # Hack to remove leading
						    # whitespace
# Generate a list of matching packages
    MATCHINGPKGS=$(getPkgName ${index})

    if [ "${MATCHINGPKGNR}" -gt "1" ]; then
	# Found multiple matches; return the list and request a more
	# specific regex
	echo "====> Found ${MATCHINGPKGNR} matching packages; choose one and run '${ME}' again."
	for i in ${MATCHINGPKGS}; do
	    echo "    $i"
	done
	return 1
    elif [ "${MATCHINGPKGNR}" -lt "1" ]; then
	echo "====> No matching packages found; consider changing the syntax of your regular expression."
	exit 1
    else
	# Install the package
	read REPLY?"====> Install ${MATCHINGPKGS}? [y/N] "
	case ${REPLY} in
	    y|Y|yes|YES)
	    echo "====> Installing ${MATCHINGPKGS}."
	    ${SUDO} ${PKGADD} ${PKGPATH}/${MATCHINGPKGS}
	    ;;
	esac
    fi
    increment=$((increment +1 ))
done
