##################  BEGIN HEADERS
# Filename	: $HOME/.profiles/openbsd
# Use		: Universal shell functions
# Author	: Will Maier <willmaier@ml1.net>
# Vim		: vim: set ft=sh:
# CVS		: $Id: functions,v 1.6 2006/07/18 14:56:03 will Exp $
# Copyright	: Copyright (c) 2006 Will Maier
# License	: Expat; see <http://www.opensource.org/licenses/mit-license.php>
##################  END HEADERS

# Paths
DICT="/usr/share/dict/words"
SSH_HOME="$HOME/.ssh"

warn () {
	MESSAGE=$1
	echo "=!=> ${MESSAGE}"
}
notify () {
	if [ "$#" -eq 1 ]; then
		LEVEL=1
		MESSAGE=$1
	else
		LEVEL=$1
		MESSAGE=$2
	fi

	if [ "${LEVEL}" -le "${VERBOSE}" ]; then
		echo "===> ${MESSAGE}"
	fi
}
lookup () {
	REGEX=$1
	grep ${REGEX} 
}
calc () {
    cat <<EOF | bc -l
    scale=2
	$*
EOF
}
scpkey () {
    # Like: scp-key wcmaier@burrito.cae.wisc.edu "SSH-OPTIONS"
    TARGET=$1
    shift
    SSH_OPTS=$*
    SSH_AUTHFILE="${SSH_HOME}/authorized_keys"
    for PUBKEY in "${SSH_HOME}/id*pub"; do
	ssh ${SSH_OPTS} $TARGET "(chmod 600 ${SSH_AUTHFILE}; sh -c \"cat - >> ${SSH_AUTHFILE}\")" < ${PUBKEY}
    done
}
agent () {
    SSH_AGENT_FILE=~/.ssh/agent
    if [ -r ${SSH_AGENT_FILE} ]; then
        notify 2 "Found agent file ${SSH_AGENT_FILE}."
        chmod 600 ${SSH_AGENT_FILE}
        . ${SSH_AGENT_FILE} > /dev/null

        # See if old agent still exists.
        kill -0 ${SSH_AGENT_PID} > /dev/null 2>&1
        if [ $? -gt 0 ]; then
            notify 2 "Agent ${SSH_AGENT_PID} doesn't appear to be running."
            # Agent doesn't exist; make new agent.
            rm -f ${SSH_AGENT_FILE}
            eval $(ssh-agent -s | tee ${SSH_AGENT_FILE})
        else
            notify 2 "Agent ${SSH_AGENT_PID} exists."
            # Agent does exist; kill all the other 'uns.
            kill $(pgrep -U ${USER} ssh-agent | grep -v ${SSH_AGENT_PID}) > /dev/null 2>&1
        fi
    else
        notify 2 "Didn't find an agent file."
        # If we don't know about the agents floating around, kill
        # 'em.
        pkill -U ${USER} ssh-agent
        rm -f ${SSH_AGENT_FILE}
        touch ${SSH_AGENT_FILE}
	chmod 600 ${SSH_AGENT_FILE}

        # Make new agent
	notify 2 "Creating a new agent."
        eval $(ssh-agent -s | tee ${AGENTFILE})
    fi

    # List keys represented by the agent; if none, add some keys
    if [ ${VERBOSE} -ge 1 ]; then
        ssh-add -l
    else
        ssh-add -l 2>&1 > /dev/null
    fi
    if [ $? -gt 0 ]; then
        notify 2 "Don't appear to be any keys in the agent."
        KEYS=$(find ${SSH_HOME} -follow -name "id_*" \! -name "*.pub")
        ssh-add -t 24h ${KEYS} > /dev/null 2>&1
    fi
    chmod 600 ${SSH_AGENT_FILE}
}
unstamp () {
    perl -e "print scalar(localtime($1))"; echo
}
sr () {
    [ "${XAUTHORITY}" -o "${DISPLAY}" ] && xtitle $(echo $1 | tr "[:lower:]" "[:upper:]")
    screen -RD $1
}
lsx () {
    IFS=:
    for DIR in ${PATH}; do
        for FILE in "${DIR}"/*; do
            [ -x "${FILE}" ] && echo "${FILE##*/}"
        done
    done | sort -u
}
secret () {
    SAFEDIR="${HOME}/.safe"
    SAFEIMG="${HOME}/.safe.img"
    SVND="s$(sudo vnconfig -l |\
        sed -e '/not in use$/!d; s/:.*$//' | head -1)"
    [ "${SVND}" != 's' ] || ("no free (s)vnd devices"; return 1)
    sudo vnconfig -k "${SVND}" "${SAFEIMG}" && \
    sudo mount "/dev/${SVND}c" "${SAFEDIR}" && \
    vim "${SAFEDIR}"
    sudo umount "${SAFEDIR}" && \
    sudo vnconfig -u "${SVND}"
}
TMUX="tmux -S ${TMUX_SOCK}"
attach () {
    SESSION=$1
    ${TMUX} has-session -t "${SESSION}" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	${TMUX} new-session -ds "${SESSION}"
    fi
    if [ -n "${TMUX_CONFIG}" ]; then
        ${TMUX} source-file ${TMUX_CONFIG}
    fi
    ${TMUX} attach-session -dt "${SESSION}"
}
meta () {
    TMUX_CONFIG=/home/will/.meta.conf
    attach meta
}
mobi () {
    TMUX_CONFIG=/home/will/.mobi.conf
    attach mobi
}
master () {
    TMUX_CONFIG=/home/will/.master.conf
    attach master
}
sleepuntil () {
	DATE=$1 
	INTERVAL=${2:-60} 
	TARGET=$(date -j "${DATE}" "+%s") 
	echo "Sleeping until $(date -j "${DATE}")..."
	while [ "$(date "+%s")" -lt "${TARGET}" ]
	do
		sleep "${INTERVAL}"
	done
}
