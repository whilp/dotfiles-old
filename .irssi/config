servers = (
  {
    address = "cvs.openbsd.org";
    chatnet = "openbsd-porters";
    port = "7326";
    use_ssl = "no";
    ssl_verify = "no";
  },
  {
    address = "cvs.openbsd.org";
    chatnet = "openbsd-hackers";
    port = "7326";
    use_ssl = "no";
    ssl_verify = "no";
  },
  { address = "localhost"; chatnet = "bitlbee"; port = "6667"; },
  { 
    address = "irc.freenode.net";
    chatnet = "freenode";
    port = "6667";
  },
  { address = "irc.efnet.org"; chatnet = "EFNet"; port = "6667"; },
  {
    address = "irc.oftc.net";
    chatnet = "oftc";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "no";
  },
  {
    address = "silc.peereboom.us";
    chatnet = "silc";
    port = "706";
    use_ssl = "no";
    ssl_verify = "no";
  }
);

chatnets = {
  "openbsd-porters" = {
    type = "ICB";
    nick = "wcmaier_p";
    username = "wcmaier";
  };
  "openbsd-hackers" = {
    type = "ICB";
    nick = "wcmaier";
    username = "wcmaier";
  };
  silc = { type = "SILC"; nick = "wcmaier"; username = "wcmaier"; };
  freenode = {
    type = "IRC";
    nick = "lt_kije";
    username = "lt_kije";
    autosendcmd = "wait 2000; /msg NickServ identify lesheros";
    max_kicks = "4";
    max_msgs = "1";
    max_modes = "4";
    max_whois = "1";
  };
  IRCnet = {
    type = "IRC";
    max_kicks = "4";
    max_msgs = "5";
    max_whois = "4";
    max_query_chans = "5";
  };
  EFNet = { 
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "1";
  };
  bitlbee = {
    type = "IRC";
    nick = "will";
    autosendcmd = "wait 2000; /msg &bitlbee identify lesheros";
  };
  oftc = { type = "IRC"; };
};

channels = (
  { name = "&bitlbee"; chatnet = "bitl"; autojoin = "no"; },
  { name = "#openbsd"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#wilug"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#metabug"; chatnet = "freenode"; autojoin = "no"; },
  { name = "#obsd"; chatnet = "freenode"; autojoin = "no"; },
  { name = "porters"; chatnet = "openbsd-porters"; autojoin = "no"; },
  { name = "hackers"; chatnet = "openbsd-hackers"; autojoin = "no"; },
  { name = "#openbsd"; chatnet = "silc"; autojoin = "no"; },
  { name = "#porters"; chatnet = "silc"; autojoin = "no"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  back = "/away";
  gone = "/away \"Life...\"";
  next = "window next";
  prev = "window prev";
  active = "window goto active";
  2 = "win 2";
  1 = "win 1";
  a = "active";
};
hilights = (
  { text = "lt_kije"; nick = "yes"; word = "yes"; },
  { text = "maier"; nick = "yes"; word = "yes"; },
  { text = "jacobsonlaura"; level = "2944"; nick = "yes"; word = "yes"; },
  { text = "#et"; nick = "yes"; word = "yes"; },
  { text = "#games"; nick = "yes"; word = "yes"; },
  {
    text = "trevor JOINS PARTS QUITS MODES";
    nick = "yes";
    word = "yes";
  },
  { 
    text = "laura JOINS PARTS QUITS MODES";
    nick = "yes";
    word = "yes";
  }
);
ignores = (
  { level = "JOINS PARTS QUITS"; servertag = "efnet"; },
  { level = "JOINS PARTS QUITS"; servertag = "oftc"; },
  { level = "JOINS PARTS QUITS"; servertag = "freenode"; },
  { mask = "vieq"; level = "ALL"; },
  { mask = "brian"; level = "JOINS PARTS QUITS"; },
  { level = "JOINS PARTS QUITS"; servertag = "SILCNet"; },
  { level = "JOINS PARTS QUITS"; servertag = "openbsd-porters"; },
  { level = "JOINS PARTS QUITS"; servertag = "openbsd-hackers"; }
);
completions = {
  obsd = { value = "OpenBSD"; auto = "yes"; };
  fbsd = { value = "FreeBSD"; auto = "yes"; };
  "obsd?" = { value = "OpenBSD?"; auto = "yes"; };
  "fbsd?" = { value = "FreeBSD?"; auto = "yes"; };
  "gg:" = {
    value = "http://www.google.com/search?rls=en&q=";
    auto = "yes";
  };
  "cvs:" = {
    value = "http://www.openbsd.org/cgi-bin/cvsweb/";
    auto = "yes";
  };
  "man:" = {
    value = "http://www.openbsd.org/cgi-bin/man.cgi?query=";
    auto = "yes";
  };
};
settings = {
  core = {
    real_name = "will";
    user_name = "will";
    nick = "wcmaier_p";
    timestamp_format = "%H:%M:%S";
    log_timestamp = "%Y.%m.%d %H:%M";
  };
  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = {
    theme = "plugin";
    autolog_path = "~/.irclogs/$0/$tag-%y.%m.%U.log";
    autolog = "yes";
    bell_beeps = "yes";
    beep_msg_level = "MSGS HILIGHT";
  };
  "irc/core" = { alternate_nick = "will_"; };
  "perl/core/scripts" = {
    awl_hide_data = "1";
    awl_display_key = "$Q $H$C$S";
    autoaway_sec = "600";
    autoaway_msg = "NAK";
    awl_sort = "refnum";
  };
};
keyboard = (
  { key = "^W"; id = "key"; data = "window"; },
  { key = "window-h"; id = "previous_window"; data = ""; },
  { key = "window-p"; id = "previous_window"; data = ""; },
  { key = "window-l"; id = "next_window"; data = ""; },
  { key = "window-n"; id = "next_window"; data = ""; },
  { key = "window-k"; id = "upper_window"; data = ""; },
  { key = "window-j"; id = "lower_window"; data = ""; },
  { key = "window-1"; id = "change_window"; data = "1"; },
  { key = "window-2"; id = "change_window"; data = "2"; },
  { key = "window-3"; id = "change_window"; data = "3"; },
  { key = "window-4"; id = "change_window"; data = "4"; },
  { key = "window-5"; id = "change_window"; data = "5"; },
  { key = "window-6"; id = "change_window"; data = "6"; },
  { key = "window-7"; id = "change_window"; data = "7"; },
  { key = "window-8"; id = "change_window"; data = "8"; },
  { key = "window-9"; id = "change_window"; data = "9"; },
  { key = "window-c"; id = "command"; data = "window new hide"; },
  { key = "^N"; id = "next_window"; data = ""; },
  { key = "^p"; id = "previous_window"; data = ""; },
  { key = "window-w"; id = "change_window"; data = "12"; },
  { key = "window-window"; id = "active_window"; data = ""; },
  { key = "window-0"; id = "change_window"; data = "10"; },
  { key = "window-q"; id = "change_window"; data = "11"; },
  { key = "window-e"; id = "change_window"; data = "13"; },
  { key = "window-r"; id = "change_window"; data = "14"; },
  { key = "window-t"; id = "change_window"; data = "15"; },
  { key = "window-a"; id = "active_window"; data = ""; },
  { key = "home"; id = "scroll_start"; data = ""; },
  { key = "end"; id = "scroll_end"; data = ""; },
  { key = "^F"; id = "scroll_forward"; data = ""; },
  { key = "^B"; id = "scroll_backward"; data = ""; }
);
statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "yes";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        user = { };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
logs = { };
windows = {
  1 = { immortal = "yes"; name = "(status)"; level = "ALL"; };
  2 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&bitlbee";
        tag = "bitlbee";
      }
    );
  };
  3 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#wilug";
        tag = "freenode";
      }
    );
  };
  4 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#OpenBSD";
        tag = "freenode";
      }
    );
  };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#obsd";
        tag = "freenode";
      }
    );
  };
  6 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#metabug";
        tag = "freenode";
      }
    );
  };
  7 = { };
  8 = { };
  9 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "SILC";
        name = "#openbsd";
        tag = "SILCNet";
      }
    );
  };
  10 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&uscms-t2";
        tag = "bitlbee";
      }
    );
  };
  11 = { };
};
mainwindows = { 1 = { first_line = "1"; lines = "38"; }; };
